pipeline {
    agent any

    environment {
        PATH = "${PATH}:${getTerraformPath()}"
        TERRAFORM_DIR = "Full-deployment"
    }
    
    stages {
        stage('Approval to Launch Pipeline') {
            steps {
                script {
                    input(
                        id: 'start_confirm',
                        message: 'Ready to Launch the Pipeline?',
                        parameters: [
                            [$class: 'BooleanParameterDefinition', defaultValue: false, description: 'Start the Pipeline?', name: 'confirm']
                        ]
                    )
                }
            }
        }

        stage('Terraform Init') {
            steps {
                slackSend(
                    channel: '#stackjenkins',
                    color: '#3498DB',
                    message: """TERRAFORM INIT
Status: Started
User: RichardC
Job: ${env.JOB_NAME} [${env.BUILD_NUMBER}]
Time: ${new Date().format("HH:mm:ss")}
URL: ${env.BUILD_URL}"""
                )
                sh """
                    cd ${TERRAFORM_DIR}
                    terraform init -migrate-state
                """
            }
        }

        stage('Terraform Plan') {
            steps {
                withCredentials([file(credentialsId: 'clixx-tfvars', variable: 'TFVARS_FILE')]) {
                    slackSend(
                        channel: '#stackjenkins',
                        color: '#F39C12',
                        message: """TERRAFORM PLAN
Status: Started
User: RichardC
Job: ${env.JOB_NAME} [${env.BUILD_NUMBER}]
Time: ${new Date().format("HH:mm:ss")}
URL: ${env.BUILD_URL}"""
                    )
                    sh """
                        cd ${TERRAFORM_DIR}
                        terraform plan -var-file="\$TFVARS_FILE" -out=tfplan -input=false
                    """
                }
            }
        }

        stage('Terraform Apply') {
            steps {
                withCredentials([file(credentialsId: 'clixx-tfvars', variable: 'TFVARS_FILE')]) {
                    slackSend(
                        channel: '#stackjenkins',
                        color: '#2ECC71',
                        message: """TERRAFORM APPLY
Status: Started
User: RichardC
Job: ${env.JOB_NAME} [${env.BUILD_NUMBER}]
Time: ${new Date().format("HH:mm:ss")}
URL: ${env.BUILD_URL}"""
                    )
                    sh """
                        cd ${TERRAFORM_DIR}
                        terraform apply -var-file="\$TFVARS_FILE" -input=false tfplan
                    """
                }
            }
        }

        stage('Approval to Destroy Infrastructure') {
            steps {
                script {
                    input(
                        id: 'destroy_confirm',
                        message: 'Do you want to destroy this environment?',
                        parameters: [
                            [$class: 'BooleanParameterDefinition', defaultValue: false, description: 'Run terraform destroy?', name: 'confirm']
                        ]
                    )
                }
            }
        }

        stage('Terraform Destroy') {
            steps {
                withCredentials([file(credentialsId: 'clixx-tfvars', variable: 'TFVARS_FILE')]) {
                    slackSend(
                        channel: '#stackjenkins',
                        color: '#E74C3C',
                        message: """TERRAFORM DESTROY
Status: Started
User: RichardC
Job: ${env.JOB_NAME} [${env.BUILD_NUMBER}]
Time: ${new Date().format("HH:mm:ss")}
URL: ${env.BUILD_URL}
WARNING: Removing Infrastructure"""
                    )
                    sh """
                        cd ${TERRAFORM_DIR}
                        terraform destroy -var-file="\$TFVARS_FILE" -auto-approve
                    """
                }
            }
        }
    }

    post {
        success {
            slackSend(
                channel: '#stackjenkins',
                color: '#2ECC71',
                message: """TERRAFORM SUCCESS
User: RichardC
Job: ${env.JOB_NAME} [${env.BUILD_NUMBER}]
Time: ${new Date().format("HH:mm:ss")}
Status: Completed Successfully
URL: ${env.BUILD_URL}"""
            )
            echo "Deployment successful."
        }
        failure {
            slackSend(
                channel: '#stackjenkins',
                color: '#E74C3C',
                message: """TERRAFORM FAILURE
User: RichardC
Job: ${env.JOB_NAME} [${env.BUILD_NUMBER}]
Time: ${new Date().format("HH:mm:ss")}
Status: Failed
Check logs for details
URL: ${env.BUILD_URL}"""
            )
            echo "Deployment failed. Check logs."
        }
        always {
            script {
                if (currentBuild.currentResult == 'SUCCESS' && env.STAGE_NAME == 'Terraform Destroy') {
                    slackSend(
                        channel: '#stackjenkins',
                        color: '#9B59B6',
                        message: """TERRAFORM DESTROY SUCCESS
User: RichardC
Job: ${env.JOB_NAME} [${env.BUILD_NUMBER}]
Time: ${new Date().format("HH:mm:ss")}
Status: Infrastructure Removed
URL: ${env.BUILD_URL}"""
                    )
                } else if (currentBuild.currentResult == 'FAILURE' && env.STAGE_NAME == 'Terraform Destroy') {
                    slackSend(
                        channel: '#stackjenkins',
                        color: '#C0392B',
                        message: """TERRAFORM DESTROY FAILED
User: RichardC
Job: ${env.JOB_NAME} [${env.BUILD_NUMBER}]
Time: ${new Date().format("HH:mm:ss")}
Status: Failed to remove infrastructure
URL: ${env.BUILD_URL}"""
                    )
                }
            }
        }
    }
}

def getTerraformPath() {
    return tool(name: 'terraform-14', type: 'terraform')
}
